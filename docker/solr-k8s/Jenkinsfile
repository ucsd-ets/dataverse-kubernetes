void setBuildStatus(String message, String state) {
  step([
      $class: "GitHubCommitStatusSetter",
      reposSource: [$class: "ManuallyEnteredRepositorySource", url: "${env.GIT_URL}"],
      contextSource: [$class: "ManuallyEnteredCommitContextSource", context: "ci/docker/solr-k8s"],
      errorHandlers: [[$class: "ChangingBuildStatusErrorHandler", result: "UNSTABLE"]],
      statusResultSource: [ $class: "ConditionalStatusResultSource", results: [[$class: "AnyBuildResult", message: message, state: state]] ]
  ]);
}

pipeline {
  agent any
  environment {
    DOCKER_IMAGE_NAME = "ucsdets/dataverse-solr"
    DOCKER_IMAGE_TAG = "build-${env.BRANCH_NAME}"
    DOCKER_WORKDIR = "docker/solr-k8s"
    DOCKER_HUB_CRED = "dockerhub-dataversebot"
    DOCKER_REGISTRY = "https://registry.hub.docker.com"
  }
  triggers {
    cron('H H(0-4) * * *')
    githubPush()
  }
  stages {
    stage('checkout') {
      steps { checkout scm }
    }
    stage('build') {
      when {
        anyOf {
          changeset "docker/solr-k8s/**"
          triggeredBy 'TimerTrigger'
          triggeredBy cause: "UserIdCause"
          tag ""
        }
      }
      steps {
        script {
          docker_image = docker.build("${env.DOCKER_IMAGE_NAME}:${env.DOCKER_IMAGE_TAG}", "--pull ${env.DOCKER_WORKDIR}")
        }
      }
    }
    stage('push') {
      when {
        anyOf {
          changeset "docker/solr-k8s/**"
          changeset "docs/images/solr-k8s.md"
          triggeredBy 'TimerTrigger'
          triggeredBy cause: "UserIdCause"
          tag ""
        }
      }
      parallel {
        stage('release') {
          when {
            tag "v4.*"
          }
          environment {
            DOCKER_IMAGE_TAG = "${TAG_NAME.substring(1)}"
          }
          steps {
            script {
              docker.withRegistry("${env.DOCKER_REGISTRY}", "${env.DOCKER_HUB_CRED}") {
                docker_image.push("${env.DOCKER_IMAGE_TAG}")
              }
            }
          }
        }
        stage('latest') {
          when {
            branch 'release'
          }
          environment {
            // credentials() will magically add DOCKER_HUB_USR and DOCKER_HUB_PSW
            // See also https://jenkins.io/doc/book/pipeline/jenkinsfile/#usernames-and-passwords
            DOCKER_HUB = credentials("${env.DOCKER_HUB_CRED}")
          }
          steps {
            script {
              // Push release image to latest tag
              docker.withRegistry("${env.DOCKER_REGISTRY}", "${env.DOCKER_HUB_CRED}") {
                docker_image.push("latest")
              }
            }
            // Update description on DockerHub
            sh "./docs/images/push-description.sh solr-k8s"
          }
        }
      }
    }
  }
  post {
    success {
        setBuildStatus("Image build (if necessary: push) succeeded", "SUCCESS");
    }
    failure {
        setBuildStatus("Image build or push failed", "FAILURE");
    }
  }
}
